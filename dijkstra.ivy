#lang ivy1.7

# try running ivy_check, ivy_check diagnose=true, and ivy_check trace=true
# for more on Ivy, visit: http://microsoft.github.io/ivy/

type computer

relation b(P:computer)
relation c(P:computer)
relation pc0(P:computer)
relation pc1(P:computer)
relation pc2(P:computer)
relation pc3(P:computer)
relation pc4(P:computer)
relation pc7(P:computer)
relation pc89(P:computer)
relation pc12(P:computer)
relation pc12b(P:computer)
relation pc14(P:computer)

relation checked(I:computer,J:computer)
relation check_result(I:computer,J:computer)

var k:computer

after init {
    b(P) := true;
    c(P) := true;
    pc0(P) := true;
    pc1(P) := false;
    pc2(P) := false;
    pc3(P) := false;
    pc4(P) := false;
    pc7(P) := false;
    pc89(P) := false;
    pc12(P) := false;
    pc12b(P) := false;
    pc14(P) := false;

    checked(I,J) := false;
#    checked(I,I) :=true;
    check_result(I,J) := false;
#    check_result(I,I) :=true;
}

action f_pc0(i:computer) = {
    require pc0(i);
    pc0(i):=false;
    b(i) := false;
    pc1(i):=true;
}
export f_pc0
#invariant [pc0_inv] forall P:computer . pc0(P) -> b(P) & c(P)

action f_pc1(i:computer) = {
    require pc1(i);
    pc1(i) := false;
    if i=k {
        pc7(i):= true;
    } else {
	pc2(i):=true;
    }
}
export f_pc1
invariant [pc1_inv] forall P:computer . pc1(P) -> ~b(P)

action f_pc2(i:computer) = {
    require pc2(i);
    pc2(i):=false;
    c(i) := true;
    pc3(i):=true;
}
export f_pc2
invariant [pc2_inv] forall P:computer . pc2(P) -> ~b(P)


action f_pc3(i:computer) = {
    require pc3(i);
    pc3(i) := false;
    if b(k) {
        k := i;
    };
    pc4(i) := true;
}
export f_pc3
invariant [pc3_inv] forall P:computer . pc3(P) -> ~b(P)

action f_pc4(i:computer) = {
    require pc4(i);
    pc4(i):= false;
    pc1(i) := true;
}
export f_pc4
invariant [pc4_inv] forall P:computer . pc4(P) -> ~b(P)

action f_pc7(i:computer) = {
    require pc7(i);
    pc7(i) := false;
    c(i) := false;

    checked(i,J) := false; 
    checked(i,i) := true; 
    check_result(i,J) := false; 
    check_result(i,i) := true; 
    pc89(i):=true;
}
export f_pc7
invariant [pc7_inv] forall P:computer . pc7(P) -> ~b(P)

action f_pc89_update(i:computer, j:computer) = {
    require (~checked(i,j) & j ~= i & pc89(i));
   
    checked(i,j) := true;
    check_result(i,j) := c(j); 
}
export f_pc89_update

action f_pc89_passed(i:computer) = {
    require ((forall J:computer.(checked(i,J) & check_result(i,J))) & pc89(i));

    checked(i,J):=false;
    checked(i,i) := true;
    check_result(i,J) := false;
    check_result(i,i) := true; 

    pc89(i) := false;
    pc12(i) := true; 
}
export f_pc89_passed

action f_pc89_failed(i:computer) = {
    require ((exists J:computer. (checked(i,J) & ~check_result(i,J))) & pc89(i));

    checked(i,J):=false;
    checked(i,i) := true;
    check_result(i,J):=false;
    check_result(i,i):=true;

    pc89(i) := false;
    pc1(i) := true; 
}
export f_pc89_failed
invariant [pc89_inv] forall P:computer . pc89(P) -> ~b(P) & ~c(P)
#invariant [pc89_check_res] forall P:computer, I:computer . pc89(P) & P~= I & ~c(I) &  -> ~check_result(P,I)
invariant [pc89_check_res2] forall P:computer, I:computer . P~= I & ~checked(P,I) -> ~check_result(P,I)
invariant [only_check_pc89] forall P:computer, I:computer . P~= I & ~pc89(P) -> ~checked(P,I)
invariant [check_result_pc89] forall P:computer, I:computer . P~= I & pc89(P) & check_result(P,I) -> ~pc12(I)
invariant [check_result2_pc89] forall P:computer, I:computer . P~= I & pc89(P) & check_result(P,I) -> ~check_result(I,P)

action f_pc12a(i:computer) = {
    require pc12(i);
    pc12(i):=false;
    c(i):=true;
    pc12b(i) := true;
}
export f_pc12a
invariant [pc12_inv] forall P:computer . pc12(P) -> ~b(P) & ~c(P)
invariant [critical_section] forall C1:computer, C2:computer. pc12(C1) & pc12(C2) -> C1 = C2
#invariant [critical_k] forall P1:computer. pc12(P1) -> k = P1

action f_pc12b(i:computer) = {
    require pc12b(i);
    pc12b(i) := false;
    b(i) := true;
    pc14(i):=true;
}
export f_pc12b
invariant [pc12b_inv] forall P:computer . pc12b(P) -> ~b(P) & c(P)

action f_pc14(i:computer) = {
    require pc14(i);
    pc14(i):=false;
    pc0(i):=true;
}
export f_pc14
invariant [pc14_inv] forall P:computer . pc14(P) -> b(P) & c(P)

#invariant [notc_in_critical_section] forall P:computer. pc12(P) -> ~c(P)

invariant [pc_is_active] forall P:computer. pc0(P)|pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P)

invariant [unique_pc0] forall P:computer. pc0(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc1] forall P:computer. pc1(P) -> ~(pc0(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc2] forall P:computer. pc2(P) -> ~(pc1(P)|pc0(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc3] forall P:computer. pc3(P) -> ~(pc1(P)|pc2(P)|pc0(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc4] forall P:computer. pc4(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc0(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc7] forall P:computer. pc7(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc0(P)|pc89(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc89] forall P:computer. pc89(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc0(P)|pc12(P)|pc12b(P)|pc14(P))

invariant [unique_pc12] forall P:computer. pc12(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc0(P)|pc12b(P)|pc14(P))

invariant [unique_pc12b] forall P:computer. pc12b(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc0(P)|pc14(P))

invariant [unique_pc14] forall P:computer. pc14(P) -> ~(pc1(P)|pc2(P)|pc3(P)|pc4(P)|pc7(P)|pc89(P)|pc12(P)|pc12b(P)|pc0(P))

#invariant [unique_pc0] forall P:computer. pc0(P) -> ~pc1(P)
#invariant [unique_pc1] forall P:computer. pc0(P) -> ~pc2(P)
#invariant [unique_pc2] forall P:computer. pc0(P) -> ~pc3(P)
#invariant [unique_pc3] forall P:computer. pc0(P) -> ~pc4(P)
#invariant [unique_pc4] forall P:computer. pc0(P) -> ~pc7(P)
#invariant [unique_pc5] forall P:computer. pc0(P) -> ~pc89(P)
#invariant [unique_pc6] forall P:computer. pc0(P) -> ~pc12(P)
#invariant [unique_pc7] forall P:computer. pc0(P) -> ~pc12b(P)
#invariant [unique_pc8] forall P:computer. pc0(P) -> ~pc14(P)
#invariant [unique_pc9] forall P:computer. pc1(P) -> ~pc0(P)
#invariant [unique_pc10] forall P:computer. pc1(P) -> ~pc2(P)
#invariant [unique_pc11] forall P:computer. pc1(P) -> ~pc3(P)
#invariant [unique_pc12] forall P:computer. pc1(P) -> ~pc4(P)
#invariant [unique_pc13] forall P:computer. pc1(P) -> ~pc7(P)
#invariant [unique_pc14] forall P:computer. pc1(P) -> ~pc89(P)
#invariant [unique_pc15] forall P:computer. pc1(P) -> ~pc12(P)
#invariant [unique_pc16] forall P:computer. pc1(P) -> ~pc12b(P)
#invariant [unique_pc17] forall P:computer. pc1(P) -> ~pc14(P)
#invariant [unique_pc18] forall P:computer. pc2(P) -> ~pc0(P)
#invariant [unique_pc19] forall P:computer. pc2(P) -> ~pc1(P)
#invariant [unique_pc20] forall P:computer. pc2(P) -> ~pc3(P)
#invariant [unique_pc21] forall P:computer. pc2(P) -> ~pc4(P)
#invariant [unique_pc22] forall P:computer. pc2(P) -> ~pc7(P)
#invariant [unique_pc23] forall P:computer. pc2(P) -> ~pc89(P)
#invariant [unique_pc24] forall P:computer. pc2(P) -> ~pc12(P)
#invariant [unique_pc25] forall P:computer. pc2(P) -> ~pc12b(P)
#invariant [unique_pc26] forall P:computer. pc2(P) -> ~pc14(P)
#invariant [unique_pc27] forall P:computer. pc3(P) -> ~pc0(P)
#invariant [unique_pc28] forall P:computer. pc3(P) -> ~pc1(P)
#invariant [unique_pc29] forall P:computer. pc3(P) -> ~pc2(P)
#invariant [unique_pc30] forall P:computer. pc3(P) -> ~pc4(P)
#invariant [unique_pc31] forall P:computer. pc3(P) -> ~pc7(P)
#invariant [unique_pc32] forall P:computer. pc3(P) -> ~pc89(P)
#invariant [unique_pc33] forall P:computer. pc3(P) -> ~pc12(P)
#invariant [unique_pc34] forall P:computer. pc3(P) -> ~pc12b(P)
#invariant [unique_pc35] forall P:computer. pc3(P) -> ~pc14(P)
#invariant [unique_pc36] forall P:computer. pc4(P) -> ~pc0(P)
#invariant [unique_pc37] forall P:computer. pc4(P) -> ~pc1(P)
#invariant [unique_pc38] forall P:computer. pc4(P) -> ~pc2(P)
#invariant [unique_pc39] forall P:computer. pc4(P) -> ~pc3(P)
#invariant [unique_pc40] forall P:computer. pc4(P) -> ~pc7(P)
#invariant [unique_pc41] forall P:computer. pc4(P) -> ~pc89(P)
#invariant [unique_pc42] forall P:computer. pc4(P) -> ~pc12(P)
#invariant [unique_pc43] forall P:computer. pc4(P) -> ~pc12b(P)
#invariant [unique_pc44] forall P:computer. pc4(P) -> ~pc14(P)
#invariant [unique_pc45] forall P:computer. pc7(P) -> ~pc0(P)
#invariant [unique_pc46] forall P:computer. pc7(P) -> ~pc1(P)
#invariant [unique_pc47] forall P:computer. pc7(P) -> ~pc2(P)
#invariant [unique_pc48] forall P:computer. pc7(P) -> ~pc3(P)
#invariant [unique_pc49] forall P:computer. pc7(P) -> ~pc4(P)
#invariant [unique_pc50] forall P:computer. pc7(P) -> ~pc89(P)
#invariant [unique_pc51] forall P:computer. pc7(P) -> ~pc12(P)
#invariant [unique_pc52] forall P:computer. pc7(P) -> ~pc12b(P)
#invariant [unique_pc53] forall P:computer. pc7(P) -> ~pc14(P)
#invariant [unique_pc54] forall P:computer. pc89(P) -> ~pc0(P)
#invariant [unique_pc55] forall P:computer. pc89(P) -> ~pc1(P)
#invariant [unique_pc56] forall P:computer. pc89(P) -> ~pc2(P)
#invariant [unique_pc57] forall P:computer. pc89(P) -> ~pc3(P)
#invariant [unique_pc58] forall P:computer. pc89(P) -> ~pc4(P)
#invariant [unique_pc59] forall P:computer. pc89(P) -> ~pc7(P)
#invariant [unique_pc60] forall P:computer. pc89(P) -> ~pc12(P)
#invariant [unique_pc61] forall P:computer. pc89(P) -> ~pc12b(P)
#invariant [unique_pc62] forall P:computer. pc89(P) -> ~pc14(P)
#invariant [unique_pc63] forall P:computer. pc12(P) -> ~pc0(P)
#invariant [unique_pc64] forall P:computer. pc12(P) -> ~pc1(P)
#invariant [unique_pc65] forall P:computer. pc12(P) -> ~pc2(P)
#invariant [unique_pc66] forall P:computer. pc12(P) -> ~pc3(P)
#invariant [unique_pc67] forall P:computer. pc12(P) -> ~pc4(P)
#invariant [unique_pc68] forall P:computer. pc12(P) -> ~pc7(P)
#invariant [unique_pc69] forall P:computer. pc12(P) -> ~pc89(P)
#invariant [unique_pc70] forall P:computer. pc12(P) -> ~pc12b(P)
#invariant [unique_pc71] forall P:computer. pc12(P) -> ~pc14(P)
#invariant [unique_pc72] forall P:computer. pc12b(P) -> ~pc0(P)
#invariant [unique_pc73] forall P:computer. pc12b(P) -> ~pc1(P)
#invariant [unique_pc74] forall P:computer. pc12b(P) -> ~pc2(P)
#invariant [unique_pc75] forall P:computer. pc12b(P) -> ~pc3(P)
#invariant [unique_pc76] forall P:computer. pc12b(P) -> ~pc4(P)
#invariant [unique_pc77] forall P:computer. pc12b(P) -> ~pc7(P)
#invariant [unique_pc78] forall P:computer. pc12b(P) -> ~pc89(P)
#invariant [unique_pc79] forall P:computer. pc12b(P) -> ~pc12(P)
#invariant [unique_pc80] forall P:computer. pc12b(P) -> ~pc14(P)
#invariant [unique_pc81] forall P:computer. pc14(P) -> ~pc0(P)
#invariant [unique_pc82] forall P:computer. pc14(P) -> ~pc1(P)
#invariant [unique_pc83] forall P:computer. pc14(P) -> ~pc2(P)
#invariant [unique_pc84] forall P:computer. pc14(P) -> ~pc3(P)
#invariant [unique_pc85] forall P:computer. pc14(P) -> ~pc4(P)
#invariant [unique_pc86] forall P:computer. pc14(P) -> ~pc7(P)
#invariant [unique_pc87] forall P:computer. pc14(P) -> ~pc89(P)
#invariant [unique_pc88] forall P:computer. pc14(P) -> ~pc12(P)
#invariant [unique_pc89] forall P:computer. pc14(P) -> ~pc12b(P)
#
